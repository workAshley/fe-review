{"version":3,"file":"jsbridge.umd.js","sources":["../utils.js","../index.js"],"sourcesContent":["const toString = Object.prototype.toString\r\nfunction isType(name) {\r\n  return function (obj) {\r\n    return toString.call(obj) === '[object ' + name + ']'\r\n  }\r\n}\r\n\r\nexport const isObject = isType('Object')\r\nexport const isFuntion = isType('Function')\r\nexport const isArray = isType('Array')\r\nexport const isString = isType('String')\r\n\r\nexport const noop = () => { }\r\n\r\nlet id = 1\r\nexport const guid = () => id++\r\n\r\nexport const toRgb = str => {\r\n  let res = []\r\n  let hexColor = str.toLowerCase()\r\n  //十六进制颜色值的正则表达式\r\n  const REG_COLOR = /^#([0-9a-f]{3}|[0-9a-f]{6})$/\r\n  // 若颜色不正确默认为白色\r\n  if (!REG_COLOR.test(hexColor)) return [255, 255, 255]\r\n  // 如果是16进制颜色\r\n  if (hexColor.length === 4) {\r\n    let newHexColor = '#'\r\n    for (var i = 1; i < 4; i += 1) {\r\n      let str = hexColor[i]\r\n      newHexColor += `${str}${str}`\r\n    }\r\n    hexColor = newHexColor\r\n  }\r\n  //处理六位的颜色值\r\n  for (var i = 1; i < 7; i += 2) {\r\n    res.push(parseInt(`0x${hexColor.slice(i, i + 2)}`))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const toColor = (hexColor, opacity = 1) => {\r\n  let [red, green, blue] = toRgb(hexColor)\r\n  return {\r\n    red,\r\n    green,\r\n    blue,\r\n    alpha: Math.floor(opacity * 255)\r\n  }\r\n}\r\n\r\nexport const now = () => {\r\n  return (new Date()).valueOf()\r\n}\r\n\r\nexport const parseParams = params => {\r\n  let res\r\n  try {\r\n    res = JSON.parse(params)\r\n  } catch (err) {\r\n    res = params\r\n  }\r\n  return res\r\n}\r\nexport const resolveCallback = action => response => action(response)","import {\n  isFuntion,\n  isArray,\n  isString,\n  toColor,\n  parseParams,\n  resolveCallback,\n  guid,\n  now,\n  noop\n} from './utils'\n\nconst APP_CONTEXT = 'jscomm'\nconst APP_URL = 'ekwing:abc'\nconst BRIDGE_NAME = 'bridgeClass'\n\n/**\n * Class representing a jsbridge.\n * @param {object} options\n * @param {object} [options.context=window] 运行时上下文\n * @param {boolean} [options.debug=false] 启动调试模式\n * @param {function} [options.debugHandler=console.log] 调试函数\n */\nclass Bridge {\n  constructor ({\n    context = window,\n    debug = false,\n    debugHandler = console.log\n  } = {}) {\n    this.hookMap = {}\n    this.debug = debug\n    this.debugHandler = debug ? debugHandler.bind(this) : noop\n\n    if (!context[BRIDGE_NAME]) {\n      context[BRIDGE_NAME] = this\n    }\n  }\n\n  call(url) {\n    const caller = document.createElement('iframe')\n    caller.setAttribute('style', 'display:none;width:0;height:0;border:none;')\n    caller.setAttribute('src', url)\n    document.body.appendChild(caller)\n    setTimeout(() => {\n      document.body.removeChild(caller)\n    }, 100)\n  }\n\n  /**\n   * 扩展\n   * @param {object} params - 扩展对象\n   */\n  extend (params) {\n    for (const key in params) {\n      const obj = params[key]\n      this[key] = isFuntion(obj) ? obj.bind(this) : obj\n    }\n  }\n\n  /**\n   * 触发本地事件\n   * @param {string} event - 本地事件名称\n   * @param {string|object=} params - 事件回调参数\n   */\n  emit (event, params) {\n    if (!isString(params)) {\n      params = JSON.stringify(params)\n    }\n\n    if (window[APP_CONTEXT]) {\n      // android\n      this.debugHandler('debug[Android][toLocalEvent]', event, params)\n      window[APP_CONTEXT].toLocalEvent(event, params)\n    } else {\n      // ios\n      const url = `${APP_URL}?${JSON.stringify({event, params})}`\n      this.debugHandler('debug[IOS][toLocalEvent]', url)\n      this.call(url)\n    }\n  }\n\n  /**\n   * 以promise形式注册事件回调\n   * @param {string} event 事件名称\n   * @param {Promise.resolve|Promise.reject} action promise动作\n   * @return {string} eventId 事件Id\n   */\n  register (event, action) {\n    const eventId = `${event}-${guid()}`\n    this.hookMap[eventId] = resolveCallback(action)\n    return eventId\n  }\n\n  /**\n   * 注册事件回调\n   * @param {string} event 事件名称\n   * @param {function} callback 事件回调\n   * @param {boolean} autoGenerateHookId 是否自动生成hookId，传入false时hookId为event的值\n   * @returns {string} eventId 事件Id\n   */\n  registerSync(event, callback, autoGenerateHookId = true) {\n    const eventId = autoGenerateHookId ? `${event}-${guid()}` : event\n    this.hookMap[eventId] = callback.bind(this)\n    return eventId\n  }\n\n  /**\n   * 注册事件钩子\n   * @param {string} event 事件名称\n   * @param {function} callback 事件回调\n   * @return {function} clearer 事件清除器\n   */\n  registerHook (event, callback) {\n    this.hookMap[event] = this.hookMap[event] || []\n    const hook = callback.bind(this)\n    this.hookMap[event].push(hook)\n    return () => {\n      this.hookMap[event] = this.hookMap[event].filter(_ => _ !== hook)\n    }\n  }\n\n  /**\n   * 由本地触发\n   * @private\n   * @param {string} event 事件名称\n   * @param {string=} params 事件回调参数\n   */\n  toJsEvent (event, params) {\n    const hook = this.hookMap[event]\n    if (!hook) {\n      const error = new Error(`hook[${event}] is undefined`)\n      this.debugHandler(error)\n      return false\n    }\n    params = parseParams(params)\n    if (isFuntion(hook)) {\n      hook(params)\n      delete this.hookMap[event]\n    } else if (isArray(hook)) {\n      hook.forEach(h => h(params))\n    }\n    this.debugHandler(`debug[${event}][response]`, params)\n  }\n\n  /**\n   * event[proxy] 通过本地代理请求\n   * @param {object} params\n   * @param {string} params.type 请求方法\n   * @param {url} params.url 请求地址\n   * @param {object} params.data 发送数据\n   * @param {Promise<response>}\n   */\n  request ({\n    type,\n    url,\n    data\n  }) {\n    return new Promise((resolve, reject) => {\n      this.emit('proxy', {\n        type,\n        url,\n        data,\n        success: this.register('proxy', resolve),\n        fail: this.register('proxy', reject)\n      })\n    })\n  }\n\n  /**\n   * event[openView] 跳转本地页面\n   * @param {object} params\n   * @param {string} params.url 页面地址，使用全域名，intentData的className_xx的优先级高于url\n   * @param {boolean} [params.titleBarVisible=false] 是否显示标题栏\n   * @param {string} params.title 标题栏标题\n   * @param {number} params.titleBarHeight 标题栏高度(px)\n   * @param {string} params.statusBarColor 状态栏颜色\n   * @param {string} [params.statusBarOpacity=1] 状态栏透明度\n   * @param {object=} params.data 发送的数据，用来拼接url（不包含auth认证数据，不包含设备信息需要app拼接，包括：uid,author_id,token,client,v,is_http,driverCode,这些参数由本地拼接）；如果参数重名，不要覆盖data中的值为准。\n   * @param {object=} params.intentData 跳转自定义view使用，具体参数需双方协定；非App相关的h5打开本地界面也在这里处理。已定义键值：className_android, className_ios, jump\n   * @param {boolean} [params.retain=true] 是否将新开页面推入页面访问历史栈，用于back操作\n   * @param {string} [params.animation=none] 入场动画，leftIn、rightIn、topIn、bottomIn、none\n   * @param {boolean} [params.fullScreen=false] 是否全屏（不带电池状态栏）\n   * @param {boolean} [params.isPortrait=false] 是否竖屏（需要js判断当前是竖屏还是横屏）\n   * @param {function=} params.callback 成功回调\n   * @param {boolean} [params.refresh=false] 是否在其他页面返回时需要刷新该界面的数据\n   * @param {function=} params.afterRefresh 返回时，刷新界面数据后的回调\n   */\n  push ({\n    url,\n    titleBarVisible = false,\n    title,\n    titleBarHeight,\n    statusBarColor,\n    statusBarOpacity = 1,\n    data,\n    intentData,\n    retain = true,\n    animation = 'none',\n    fullScreen = false,\n    isPortrait = false,\n    callback = noop,\n    refresh = false,\n    afterRefresh = noop\n  }) {\n    const params = {\n      url,\n      localTitleBar: titleBarVisible,\n      title,\n      titleBarHeight,\n      data,\n      intentData,\n      retain,\n      anim: animation,\n      fullScreen,\n      isPortrait,\n      callBack: this.registerSync('openView', callback),\n      needRefresh: refresh,\n      refreshCallBack: this.registerSync('openViewRefresh', afterRefresh)\n    }\n\n    if (statusBarColor) {\n      params.naviBarColor = toColor(statusBarColor, statusBarOpacity)\n    }\n\n    this.emit('openView', params)\n  }\n\n  /**\n   * event[changeOpenViewData] 更改View中的data数据\n   * @param {object} params\n   * @param {string} params.url 更新后的url地址\n   * @param {object} params.data 数据键值对\n   */\n  changeViewData ({url, data}) {\n    this.emit('changeOpenViewData', {url, data})\n  }\n\n  /**\n   * event[goback] 返回上一个页面\n   */\n  back () {\n    this.emit('goback')\n  }\n\n  /**\n   * {@link Bridge#playAudio playAudio}\n   * @typedef playAudioCallback\n   * @type {function}\n   * @param {object} params\n   * @param {'playing'|'paused'|'ended'|'error'} [params.status] playing: 播放、paused: 暂停、ended: 结束、error: 出错\n   * @param {boolean} [params.currentSrc] 当前播放器播放的地址\n   * @param {number} [params.duration] 音频时长(ms)\n   * @param {number} [params.progress] 当前进度(ms)，needDetails为true才有，每隔0.1s回调一次\n   */\n\n  /**\n   * event[playAudio] 操作音频\n   * @param {object} params\n   * @param {'play'|'stop'} [params.action='play'] play/stop 播放/停止\n   * @param {string} params.src 音频地址，本地文件或者网络url\n   * @param {boolean} [params.newPlayer=true] 是否创建新的播放器\n   * @param {boolean} [params.pauseOthers=true] 是否暂停其他播放器\n   * @param {number=} params.seekTime 播放开始的进度，单位为毫秒，默认为-1。如大于音频长度则不会播放，对type=stop无效\n   * @param {boolean} [params.needDetails=false] 是否需要播放的详细信息，对type=stop无效\n   * @param {boolean} [params.loop=false] 是否循环播放\n   * @param {boolean} [params.playLocalFile=false] 是否优先使用本地提前下好的文件\n   * @param {playAudioCallback} [params.callback] 更新回调，每隔0.1s回调一次\n   */\n  playAudio({\n    action = 'play',\n    src,\n    newPlayer = true,\n    pauseOthers = true,\n    seekTime,\n    needDetails = false,\n    loop = false,\n    playLocalFile = false,\n    callback = noop\n  }) {\n    const event = 'playAudio'\n    const hookId = `${event}-${guid()}`\n    this.registerHook(hookId, callback)\n    this.emit(event, {\n      run: action,\n      src,\n      callBack: hookId,\n      newPlayer,\n      pauseOthers,\n      seekTime,\n      needDetails,\n      loop,\n      playLocalFile\n    })\n  }\n\n  /**\n   * {@link Bridge#getAudio getAudio}\n   * @typedef getAudioResponse\n   * @type {object}\n   * @property {string} src 当前播放器播放的音频地址\n   * @property {boolean} isPlaying 是否正在播放\n   * @property {number} duration 音频时长(ms)\n   */\n\n  /**\n   * event[playStatus] 获取音频播放状态\n   * @param {string} src 音频地址，本地文件或者网络url\n   * @return {Promise<getAudioResponse>}\n   */\n  getAudio (src) {\n    return new Promise(resolve => {\n      this.emit('playStatus', {\n        src,\n        callBack: this.register('playStatus', resolve)\n      })\n    })\n  }\n\n  /**\n   * event[fetchLocalAudioSrc] 调用本地预加载音频\n   * @param {array<string>} urls 包含所有音频地址的数组\n   * @param {function} callback 更新回调，每0.1s更新一次，接收一个0-100的数据（下载进度）\n   * @return {Promise<array<string|null>>} 包含本地所有音频地址的数组，若音频下载失败，对应url为null\n   */\n  fetchAudio ({ urls, callback }) {\n    const event = 'fetchLocalAudioSrc'\n    const hookId = `${event}-${guid()}`\n    return new Promise((resolve, reject) => {\n      const hook = ({ loadingFailed, loadingProgress, localAudioSrcArr }) => {\n        if (loadingFailed) return reject({ status: 1 })\n        if (loadingProgress <= 100) {\n          callback(loadingProgress)\n          if (loadingProgress == 100 && !loadingFailed && localAudioSrcArr) resolve(localAudioSrcArr)\n          return\n        }\n        reject({ status: 2 })\n      }\n      this.registerHook(hookId, hook)\n      this.emit(event, {\n        oriAudioSrcArr: urls,\n        callBack: hookId\n      })\n    })\n  }\n\n  /**\n   * event[localVideoPlay] 调用浮层弹窗，下载音视频资源并播放\n   * @param {object} params\n   * @param {string} params.id 配音id\n   * @param {string} params.dubbingId 唯一标识某题某学生某次配音的id(教师1.5版本添加)\n   * @param {string} params.type \t播放类型，\"1\"：播放原视频，\"2\"：播放用户录音；如果合成了，直接播放合成的视频；未合成视频，需要同时播放用户的录音和视频\n   * @param {string=} params.compoundAudio 合成音频\n   * @param {string=} params.compoundVideo 合成视频\n   * @param {string} params.video 视频\n   * @param {string} params.videoBgm 视频背景音乐\n   * @param {string} params.videoCover 视频缩略图\n   * @param {object[]} params.sentence 用户的录音，必须按顺序\n   * @param {string} params.sentence[].id 唯一标识\n   * @param {string} params.sentence[].start 开始时间\n   * @param {string} params.sentence[].duration 持续时间\n   * @param {string} params.sentence[].audioUrl 录音服务器地址\n   */\n  playVideo ({id, dubbingId, type, compoundAudio, compoundVideo, video, videoBgm, videoCover, sentence}) {\n    this.emit('localVideoPlay', {\n      id,\n      dubbingId,\n      type,\n      compoundAudio,\n      compoundVideo,\n      video,\n      videoBg: videoBgm,\n      videoImg: videoCover,\n      sentence\n    })\n  }\n\n  /**\n   * {@link Bridge#getSystemInfo getSystemInfo}\n   * @typedef SystemInfoResponse\n   * @type {object}\n   * @property {string} platform 平台，如IOS/Android\n   * @property {string} osVersion 系统版本\n   * @property {string} network 网络类型，0:无网络、WIFI:wifi网络、其他：mobile网络\n   * @property {string} agent web内核\n   * @property {string} token\n   * @property {string} device 设备机型\n   */\n\n  /**\n   * event[getSysInfo] 获取本地信息\n   * @param {string} [str='platform osVersion network agent token device'] 需要返回的属性值，用空格隔开；默认属性值必带\n   * @return {Promise<SystemInfoResponse>}\n   */\n  getSystemInfo (str) {\n    return new Promise(resolve => {\n      this.emit('getSysInfo', {\n        request: str,\n        callBack: this.register('getSysInfo', resolve)\n      })\n    })\n  }\n\n  /**\n   * event[getLocalCache] 获取保存数据\n   * @param {string} key 保存数据的key值\n   * @returns {Promise<string|null>}\n   */\n  getCache (key) {\n    return new Promise(resolve => {\n      this.emit('getLocalCache', {\n        key,\n        callBack: this.register('getLocalCache', resolve)\n      })\n    })\n  }\n\n  /**\n   * event[setLocalCache] 保存数据\n   * @param {string} key 保存内容的key值，唯一标识\n   * @param {string} value 保存内容\n   * @param {object} options\n   * @param {boolean} [options.cover=true] 是否覆盖\n   * @param {boolean} [options.persistent=false] 是否持久储存\n   */\n  setCache (key, value, {cover, persistent}) {\n    this.emit('setLocalCache', {\n      key,\n      value,\n      cover,\n      persistent\n    })\n  }\n\n  /**\n   * event[setNaviBar] 设置顶部状态栏背景颜色，仅限于iOS有用\n   * @param {string} color 颜色值HexColor：#000000\n   * @param {number} [opacity=1] 透明度0~1，1为完全不透明\n   */\n  setStatusBarColor (color, opacity = 1) {\n    const params = toColor(color, opacity)\n    this.emit('setNaviBar', params)\n  }\n\n  /**\n   * event[statisticalEvent] 统计事件\n   * @param {string} event 事件名称，xs_1_001（学生-xs、家长-jz、翼赛-ys 等），中间1代表版本号，001代表的是序号\n   * @param {object} [data] 数据键值对，不能多层嵌套\n   */\n  log(event, data = {}) {\n    this.emit('statisticalEvent', {event, maps: data})\n  }\n\n  /**\n   * event[removeHistory] 移除当前页之前的访问历史\n   * @param {number} number 移除历史记录数（从最新的历史记录开始移除）\n   */\n  removeHistory (number) {\n    this.emit('removeHistory', number)\n  }\n\n  /**\n   * {@link Bridge#showTimePicker showTimePicker}\n   * @typedef TimerPickerResponse\n   * @type {object}\n   * @property {'confirmed'|'canceled'} status 用户确认/取消操作\n   * @property {number} timeStamp 用户设定的时间戳(ms)，canceled时为0\n   */\n\n  /**\n   * event[dtPicker] 调取本地时间的轮盘，返回用户选择的时间\n   * @param {object} params\n   * @param {number} [params.timeStamp=Date.now()] 轮盘默认选取时间(ms)\n   * @param {number} params.minTime 轮盘显示的最小时间(ms)\n   * @param {number} params.maxTime 轮盘显示的最大时间(ms)\n   * @param {number} [params.step=1] 步长，给分设定5的步长(ios 只能设置 (1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30))\n   * @param {boolean} [params.showMinute=true] 是否显示分钟\n   * @return {Promise<TimerPickerResponse>}\n   */\n  showTimePicker ({\n    timeStamp = now(),\n    minTime,\n    maxTime,\n    step = 1,\n    showMinute = true\n  }) {\n    return new Promise(resolve => {\n      this.emit('dtPicker', {\n        timeStamp,\n        minTime,\n        maxTime,\n        minuStep: step,\n        minuIsShow: showMinute,\n        callBack: this.register('dtPicker', resolve)\n      })\n    })\n  }\n\n  /**\n   * event[vipPop] 调用VIP弹窗\n   */\n  showVipModal () {\n    this.emit('vipPop')\n  }\n\n  /**\n   * {@link Bridge#share share}\n   * @typedef ShareResponse\n   * @type {object}\n   * @property {'success'|'fail'|'cancel'} status 成功|失败|取消\n   */\n\n  /**\n   * event[sharePage] 调用本地分享功能\n   * @param {object} params\n   * @param {string} params.type 分享到的平台（qq: share_qq、qq空间: share_qzone、微信: share_wechat、朋友圈: share_wechatmoments、微博: share_sinaweibo）\n   * @param {string} params.title 分享信息标题\n   * @param {string} params.url 分享信息地址\n   * @param {string} params.imageURL 分享信息图片\n   * @param {string} params.description 分享信息描述\n   * @return {Promise<ShareResponse>}\n   */\n  share ({type, title, url, imageURL, description}) {\n    return new Promise(resolve => {\n      this.emit('sharePage', {\n        type,\n        title,\n        url,\n        imageURL,\n        description,\n        callBack: this.register('sharePage', resolve)\n      })\n    })\n  }\n\n  /**\n   * event[visitor_pop] 调用游客弹窗\n   */\n  showVisitorModal () {\n    this.emit('visitor_pop')\n  }\n\n  /**\n   * {@link Bridge#getPhoneInfo getPhoneInfo}\n   * @typedef PhoneInfoResponse\n   * @type {object}\n   * @property {string} operator 运营商，1：中国移动；2：中国联通；4：中国电信，查询失败为''\n   * @property {string} location 归属地，精确到省、直辖市，查询失败为''\n   * @property {string} msg 错误信息提示，如手机号码不正确、查询不到手机归属地\n   * @property {string} status 查询状态，1：成功查询到归属地；-1：手机号码位数格式不正确；-2：未查询到归属地；-3：其它错误\n   */\n\n  /**\n   * event[queryLocation] 查询手机号码信息\n   * @param {number} number 要查询的手机号码\n   * @return {Promise<PhoneInfoResponse>}\n   */\n  getPhoneInfo (number) {\n    return new Promise(resolve => {\n      this.emit('queryLocation', {\n        number,\n        callBack: this.register('queryLocation', resolve)\n      })\n    })\n  }\n\n  /**\n   * {@link Bridge#showAddressBook showAddressBook}\n   * @typedef AddressBookResponse\n   * @type {object}\n   * @property {string} number 通讯录电话号码\n   * @property {string} userName 联系人姓名\n   */\n\n  /**\n   * event[addressBook] 调用通讯录\n   * @return {Promise<AddressBookResponse>}\n   */\n  showAddressBook () {\n    return new Promise(resolve => {\n      this.emit('addressBook', {\n        callBack: this.register('addressBook', resolve)\n      })\n    })\n  }\n\n  /**\n   * event[ek_login_failed] 登录失效\n   * @param {object} params\n   */\n  loginFailed (params) {\n    this.emit('ek_login_failed', params)\n  }\n\n  /**\n   * hook[jsPageHide] 当本地app点击home键退出到手机主界面和电源键关闭手机触发\n   * @param {function} callback 操作完成回调\n   * @return {function} clearer 事件清除器\n   */\n  afterPageHide (callback) {\n    return this.registerHook('jsPageHide', callback)\n  }\n\n  /**\n   * hook[jsPageShow] app从界面关闭状态进入当前页面触发\n   * @param {function} callback 操作完成回调\n   * @return {function} clearer 事件清除器\n   */\n  afterPageShow (callback) {\n    return this.registerHook('jsPageShow', callback)\n  }\n\n  /**\n   * hook[goback] app点击andriod物理返回键触发\n   * @param {function} callback 操作完成回调\n   * @return {function} clearer 事件清除器\n   */\n  beforeBack (callback) {\n    return this.registerHook('goback', callback)\n  }\n\n  /**\n   * hook[gobackCB] app返回之后触发（主要用于返回之后的数据局部更新）\n   * @param {function} callback 操作完成回调\n   * @return {function} clearer 事件清除器\n   */\n  afterBack (callback) {\n    return this.registerHook('gobackCB', callback)\n  }\n}\n\nexport default new Bridge()"],"names":["const","toString","Object","prototype","isType","name","obj","call","isFuntion","isArray","isString","noop","id","guid","toColor","hexColor","opacity","str","let","res","toLowerCase","test","length","newHexColor","i","push","parseInt","slice","toRgb","alpha","Math","floor","Bridge","ref","window","console","log","this","hookMap","debug","debugHandler","bind","context","url","caller","document","createElement","setAttribute","body","appendChild","removeChild","extend","params","key","emit","event","JSON","stringify","toLocalEvent","APP_URL","register","action","eventId","response","resolveCallback","registerSync","callback","autoGenerateHookId","registerHook","hook","filter","_","toJsEvent","error","Error","parse","err","parseParams","forEach","h","request","Promise","resolve","reject","type","data","titleBarVisible","retain","animation","fullScreen","isPortrait","refresh","afterRefresh","statusBarColor","naviBarColor","statusBarOpacity","changeViewData","back","playAudio","hookId","src","newPlayer","pauseOthers","seekTime","needDetails","loop","playLocalFile","getAudio","fetchAudio","loadingFailed","loadingProgress","localAudioSrcArr","urls","playVideo","getSystemInfo","getCache","setCache","value","setStatusBarColor","color","removeHistory","number","showTimePicker","Date","valueOf","timeStamp","minTime","maxTime","step","showMinute","showVipModal","share","title","imageURL","description","showVisitorModal","getPhoneInfo","showAddressBook","loginFailed","afterPageHide","afterPageShow","beforeBack","afterBack"],"mappings":"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"}